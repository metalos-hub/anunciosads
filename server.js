// server.js
require('dotenv').config();
const express = require('express');
const { Groq } = require('groq-sdk');
const crypto = require('crypto'); // Para gerar um ID para o prompt
const cors = require('cors');

const app = express();
const port = process.env.PORT || 3002;

if (!process.env.GROQ_API_KEY) {
  console.error("ERRO: GROQ_API_KEY n√£o est√° definida no arquivo .env");
  process.exit(1);
}

const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });

app.use(cors());
app.use(express.json());
app.use(express.static('public'));

function generateRequestId() {
  return crypto.randomBytes(4).toString('hex');
}

/**
 * Constr√≥i um prompt robusto para an√∫ncios, extrai atributos e imp√µe formata√ß√£o JSON.
 * Suporta Google Ads e Facebook Ads, focado em im√≥veis de alto padr√£o.
 */
function buildAdsPrompt({ productDescription, targetAudience = 'n√£o especificado', adPlatform }) {
    const extractInfo =
      'Antes de tudo, analise a descri√ß√£o do im√≥vel e identifique mentalmente at√© 8 atributos-chave ou diferenciais (ex: Su√≠te Master, Varanda Gourmet, 125m¬≤, Vista Mar, Seguran√ßa 24h). Voc√™ usar√° esses atributos para os sitelinks do Google Ads.';
  
    const baseInstructions = `
  Requisitos Gerais OBRIGAT√ìRIOS:
  - Idioma: Portugu√™s Brasileiro
  - Tom de Voz: Sofisticado, elegante, aspiracional e focado em exclusividade e qualidade premium.
  - Formato da Resposta: JSON puro e v√°lido, sem nenhum texto, coment√°rio ou introdu√ß√£o fora do objeto JSON.
  - Limites de Caracteres: CUMPRA RIGOROSAMENTE TODOS OS LIMITES DE CARACTERES ESPECIFICADOS. Textos que excederem ser√£o inutiliz√°veis e REJEITADOS. Verifique o comprimento de CADA item gerado. √â SUA RESPONSABILIDADE GARANTIR OS LIMITES.
  `; // Adicionado "REJEITADOS"
  
    const audienceFocusInstruction = `
  IMPORTANTE: Se um p√∫blico-alvo espec√≠fico for fornecido em "Dados de Entrada", adapte CUIDADOSAMENTE a linguagem, os benef√≠cios destacados e o tom geral para ressoar profundamente com esse grupo espec√≠fico. Mantenha o foco geral em alto padr√£o, mas personalize a abordagem para o p√∫blico-alvo informado. Se "n√£o especificado", mantenha o foco amplo em alto padr√£o.
  `;
  
    if (adPlatform === 'Google Ads') {
      return `Voc√™ √© um especialista em marketing digital e copywriting para Google Ads, mestre em criar an√∫ncios concisos e persuasivos para um p√∫blico de alt√≠ssimo padr√£o.
  ${audienceFocusInstruction}
  Dados de Entrada:
  - Descri√ß√£o do Im√≥vel: "${productDescription}"
  - P√∫blico-alvo: ${targetAudience}
  - Plataforma: ${adPlatform}
  ${baseInstructions}
  ${extractInfo}
  
  Componentes a serem gerados para Google Ads (JSON):
  1. "headlines": 20 (vinte) t√≠tulos. ATEN√á√ÉO M√ÅXIMA: CADA T√çTULO DEVE TER EXATAMENTE 30 CARACTERES OU MENOS. N√ÉO PODE HAVER EXCE√á√ïES. T√çTULOS MAIORES QUE 30 CARACTERES S√ÉO COMPLETAMENTE IN√öTEIS. Seja extremamente conciso e direto, mas mantendo a sofistica√ß√£o. Foque em uma √∫nica ideia forte por t√≠tulo. ADAPTE para o p√∫blico-alvo, se fornecido.
  2. "descriptions": 8 (oito) descri√ß√µes. Para CADA descri√ß√£o, siga este processo:
     a. Elabore uma mensagem central elegante que ressalte o luxo e os benef√≠cios premium do im√≥vel, direcionada ao p√∫blico-alvo.
     b. Escreva uma primeira vers√£o.
     c. VERIFIQUE CUIDADOSAMENTE o n√∫mero de caracteres.
     d. Se tiver MAIS de 90 caracteres, REESCREVA-A de forma mais concisa e direta, removendo palavras ou frases menos essenciais, at√© que tenha EXATAMENTE entre 70 e 90 caracteres.
     e. Se tiver MENOS de 70 caracteres, enrique√ßa-a com detalhes sofisticados ou benef√≠cios relevantes, mantendo a eleg√¢ncia, at√© atingir pelo menos 70 caracteres.
     f. O TEXTO FINAL DE CADA DESCRI√á√ÉO ENVIADO NO JSON DEVE, OBRIGATORIAMENTE, TER ENTRE 70 E 90 CARACTERES. NENHUMA DESCRI√á√ÉO PODE EXCEDER 90 CARACTERES.
  3. "sitelinks": 8 (oito) sitelinks. Utilize os atributos-chave do im√≥vel que voc√™ identificou anteriormente. ADAPTE os t√≠tulos e descri√ß√µes dos sitelinks para o p√∫blico-alvo, se fornecido, destacando o que seria mais relevante para ele. Cada sitelink deve ter:
     - "sitelink_title": T√≠tulo curto e direto. M√ÅXIMO 25 caracteres.
     - "sitelink_desc1": Primeira linha da descri√ß√£o. M√ÅXIMO 35 caracteres.
     - "sitelink_desc2": Segunda linha da descri√ß√£o. M√ÅXIMO 35 caracteres.
  4. "callouts": 8 (oito) frases de destaque. Devem ser curtas, refor√ßando a exclusividade ou caracter√≠sticas premium. ADAPTE para o p√∫blico-alvo, se fornecido. M√ÅXIMO 25 caracteres CADA.
  5. "structured_snippets": Um conjunto, contendo:
     - "header": Escolha UM dos seguintes cabe√ßalhos, o mais apropriado para o im√≥vel E para o p√∫blico-alvo (se fornecido): "Comodidades de Luxo", "Estilos de Vida", "Servi√ßos Premium", "Localiza√ß√µes Exclusivas", "Diferenciais √önicos", "Acabamentos".
     - "values": Uma lista de 5 a 8 valores relevantes para o cabe√ßalho escolhido, detalhando atributos premium que atrairiam o p√∫blico-alvo. M√ÅXIMO 25 caracteres CADA VALOR.
  6. "call_to_actions": 3 (tr√™s) chamadas para a√ß√£o. Devem ser curtas, diretas e sofisticadas, convidando para uma a√ß√£o de alto valor. ADAPTE o CTA para o que mais motivaria o p√∫blico-alvo. (ex: ‚ÄúAgende Sua Visita Privativa‚Äù, ‚ÄúDescubra a Exclusividade‚Äù, ‚ÄúConsulte Condi√ß√µes Especiais‚Äù). M√ÅXIMO 25 caracteres CADA.
  
  Formato de Sa√≠da JSON Esperado:
  \`\`\`json
  {
    "headlines": ["T√≠tulo Curto (<=30)", "Exclusivo J√° (<=30)", "..."],
    "descriptions": ["Descri√ß√£o elegante e precisa entre 70 e 90 caracteres...", "..."],
    "sitelinks": [
      {"sitelink_title":"Ex: Su√≠te Master","sitelink_desc1":"Ref√∫gio de puro conforto","sitelink_desc2":"Com closet e hidro"}
    ],
    "callouts": ["Alto Padr√£o Garantido", "Design Sofisticado", "..."],
    "structured_snippets": {"header":"Comodidades de Luxo","values":["Piscina Aquecida", "Espa√ßo Gourmet Premium", "..."]},
    "call_to_actions": ["Agende Visita VIP", "Conhe√ßa Seu Novo Lar", "Fale com Consultor"]
  }
  \`\`\`
  INSTRU√á√ÉO FINAL E CR√çTICA: Verifique meticulosamente TODOS os limites de caracteres de CADA item gerado antes de finalizar a resposta JSON. A precis√£o no comprimento, especialmente para os T√çTULOS do Google Ads (m√°ximo 30 caracteres), √© absolutamente essencial.
  `;
    }
  
    // Prompt do Facebook Ads (mantido como antes, mas voc√™ pode aplicar refor√ßos similares se necess√°rio)
    if (adPlatform === 'Facebook Ads') {
      return `Voc√™ √© um especialista em marketing digital e copywriting para Facebook Ads, mestre em criar narrativas visuais e textuais que encantam um p√∫blico de alt√≠ssimo padr√£o interessado em im√≥veis.
  ${audienceFocusInstruction}
  Dados de Entrada:
  - Descri√ß√£o do Im√≥vel: "${productDescription}"
  - P√∫blico-alvo: ${targetAudience}
  - Plataforma: ${adPlatform}
  ${baseInstructions}
  ${extractInfo} 
  
  Componentes a serem gerados para Facebook Ads (JSON):
  1. "facebook_primary_texts": 5 (cinco) op√ß√µes de Textos Principais. Devem ser narrativas envolventes e aspiracionais, pintando um quadro do estilo de vida que o im√≥vel proporciona e que seria desejado pelo p√∫blico-alvo. Use par√°grafos curtos e inclua 2 a 3 emojis estrategicamente posicionados para adicionar emo√ß√£o e apelo visual (ex: ‚ú®üè°üíé). M√ÅXIMO 300 caracteres CADA (idealmente entre 150-250).
  2. "facebook_headlines": 5 (cinco) op√ß√µes de T√≠tulos. Devem ser curtos, extremamente chamativos e capturar a aten√ß√£o do p√∫blico-alvo imediatamente. Inclua 1 emoji relevante no in√≠cio ou final de cada t√≠tulo. M√ÅXIMO 40 caracteres CADA.
  3. "facebook_link_descriptions": 3 (tr√™s) op√ß√µes de Descri√ß√µes de Link (News Feed Link Description). Devem ser concisas e complementar o t√≠tulo, incentivando o clique do p√∫blico-alvo. M√ÅXIMO 30 caracteres CADA.
  4. "facebook_ctas": 3 (tr√™s) sugest√µes de texto para bot√µes de Call to Action, que sejam convidativos para o p√∫blico-alvo, usando emojis se apropriado (ex: "‚ú® Saiba Mais", "üóìÔ∏è Agendar Visita", "üíé Descubra o Luxo", "üì≤ Fale Conosco").
  
  Formato de Sa√≠da JSON Esperado:
  \`\`\`json
  {
    "facebook_primary_texts": ["‚ú® Viva o √°pice do luxo neste im√≥vel espetacular... [mais detalhes e emojis relevantes para o p√∫blico]...", "..."],
    "facebook_headlines": ["üè° Seu Novo Para√≠so Particular!", "üíé Exclusividade e Sofistica√ß√£o", "..."],
    "facebook_link_descriptions": ["Localiza√ß√£o √çmpar. Agende!", "Detalhes que Fascinam.", "..."],
    "facebook_ctas": ["‚ú® Saiba Mais", "üóìÔ∏è Agendar Visita", "üíé Descubra o Luxo"]
  }
  \`\`\`
  INSTRU√á√ÉO FINAL E CR√çTICA: Verifique meticulosamente TODOS os limites de caracteres de CADA item gerado antes de finalizar a resposta JSON. A precis√£o no comprimento √© essencial.
  `;
    }
    throw new Error(`Plataforma '${adPlatform}' n√£o suportada para gera√ß√£o de prompt.`);
  }
  
  app.post('/api/generate-ads', async (req, res) => {
    const requestId = generateRequestId();
    const startTime = Date.now();
    const { productDescription, targetAudience, adPlatform } = req.body;
    let assistantResponseContent; 
  
    console.log(`[Req ID: ${requestId}] Nova requisi√ß√£o recebida. Plataforma: ${adPlatform}, P√∫blico: ${targetAudience || 'N/A'}`);
  
    if (!productDescription || !adPlatform) {
      console.error(`[Req ID: ${requestId}] Erro de valida√ß√£o: productDescription ou adPlatform ausentes.`);
      return res.status(400).json({ error: 'Descri√ß√£o do produto/servi√ßo e plataforma de an√∫ncio s√£o obrigat√≥rios.' });
    }
  
    try {
      const prompt = buildAdsPrompt({ productDescription, targetAudience, adPlatform });
      
      console.log(`[Req ID: ${requestId}] Enviando para Groq...`);
      const response = await groq.chat.completions.create({
        model: 'llama3-8b-8192', 
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.55, // **REDUZIDO AINDA MAIS** para m√°xima conformidade
        max_tokens: 4500, 
        top_p: 1,
        stream: false,
        response_format: { type: 'json_object' },
      });
  
      assistantResponseContent = response.choices?.[0]?.message?.content;
      const duration = Date.now() - startTime;
      console.log(`[Req ID: ${requestId}] Resposta da Groq recebida em ${duration}ms.`);
  
      if (!assistantResponseContent) {
        console.error(`[Req ID: ${requestId}] Erro: Resposta vazia da API Groq.`);
        throw new Error('Resposta vazia da API Groq');
      }
  
      let parsed = JSON.parse(assistantResponseContent);
      parsed.platform_used = adPlatform;
  
      // --- IN√çCIO DO P√ìS-PROCESSAMENTO ---
      if (adPlatform === 'Google Ads') {
        // P√≥s-processamento para T√çTULOS do Google Ads
        if (parsed.headlines) {
          const MAX_TITLE_LENGTH = 30;
          parsed.headlines = parsed.headlines.map(title => {
            if (typeof title === 'string' && title.length > MAX_TITLE_LENGTH) {
              let originalLength = title.length;
              let truncatedTitle = title.substring(0, MAX_TITLE_LENGTH + 1); // Pega um pouco a mais
              let lastSpaceIndex = truncatedTitle.lastIndexOf(' ');
              
              if (lastSpaceIndex > MAX_TITLE_LENGTH - 10 && lastSpaceIndex > 0) { // Tenta cortar na palavra
                truncatedTitle = truncatedTitle.substring(0, lastSpaceIndex);
              } else { // Sen√£o, corte direto
                truncatedTitle = title.substring(0, MAX_TITLE_LENGTH);
              }
              // Retic√™ncias n√£o s√£o comuns em t√≠tulos, ent√£o evitamos, a menos que o corte seja muito abrupto
              // No entanto, o mais importante √© N√ÉO EXCEDER 30.
              if (truncatedTitle.length > MAX_TITLE_LENGTH) { // Garantia final
                  truncatedTitle = truncatedTitle.substring(0, MAX_TITLE_LENGTH);
              }
              console.warn(`[Req ID: ${requestId}] WARN: T√çTULO do Google Ads truncado. Original ("${title}", ${originalLength} chars) -> Truncado para: ("${truncatedTitle}", ${truncatedTitle.length} chars)`);
              return truncatedTitle;
            }
            return title;
          });
        }
  
        // P√≥s-processamento para DESCRI√á√ïES do Google Ads
        if (parsed.descriptions) {
          const MAX_DESC_LENGTH = 90;
          parsed.descriptions = parsed.descriptions.map(desc => {
            if (typeof desc !== 'string') return desc; 
            if (desc.length > MAX_DESC_LENGTH) {
              let originalLength = desc.length;
              let truncatedDesc = desc.substring(0, MAX_DESC_LENGTH + 1); 
              let lastSpaceIndex = truncatedDesc.lastIndexOf(' ');
              
              if (lastSpaceIndex > MAX_DESC_LENGTH - 25 && lastSpaceIndex > 0) { 
                truncatedDesc = truncatedDesc.substring(0, lastSpaceIndex);
              } else { 
                truncatedDesc = desc.substring(0, MAX_DESC_LENGTH);
              }
              
              if (truncatedDesc.length < originalLength && !['.', '!', '?'].includes(truncatedDesc.slice(-1))) {
                if (truncatedDesc.length <= MAX_DESC_LENGTH - 3) {
                  truncatedDesc += '...';
                } else { 
                    truncatedDesc = truncatedDesc.substring(0, MAX_DESC_LENGTH - 3) + '...';
                }
              }
              if (truncatedDesc.length > MAX_DESC_LENGTH) {
                 truncatedDesc = truncatedDesc.substring(0, MAX_DESC_LENGTH);
              }
              console.warn(`[Req ID: ${requestId}] WARN: Descri√ß√£o do Google Ads truncada. Original ("${desc.substring(0,50)}...", ${originalLength} chars) -> Truncada para: ("${truncatedDesc.substring(0,50)}...", ${truncatedDesc.length} chars)`);
              return truncatedDesc;
            }
            return desc;
          });
        }
      }
      // --- FIM DO P√ìS-PROCESSAMENTO ---
  
      console.log(`[Req ID: ${requestId}] Processamento conclu√≠do. Enviando resposta para o cliente.`);
      return res.json(parsed);
  
    } catch (err) {
      // ... (seu tratamento de erro existente, j√° est√° bom) ...
      const duration = Date.now() - startTime;
      console.error(`[Req ID: ${requestId}] Erro ap√≥s ${duration}ms:`, err.message);
      const isSyntaxError = err instanceof SyntaxError;
      let errorMessage = 'Ocorreu um erro ao gerar os an√∫ncios. Por favor, tente novamente.';
      let errorDetails = err.message || 'Detalhes do erro n√£o dispon√≠veis.';
  
      if (isSyntaxError) {
        errorMessage = 'Erro ao processar a resposta da IA (formato JSON inv√°lido). Tente refinar sua descri√ß√£o ou tente novamente.';
        errorDetails = assistantResponseContent 
          ? `In√≠cio da resposta que causou o erro: ${assistantResponseContent.slice(0, 1000)}...` 
          : 'N√£o foi poss√≠vel obter a resposta da API que causou o erro de parse.';
        console.error(`[Req ID: ${requestId}] Detalhe SyntaxError:`, errorDetails);
      } else if (err.message === 'Resposta vazia da API Groq') {
          errorMessage = 'A IA n√£o retornou uma resposta. Verifique sua descri√ß√£o e tente novamente.';
          errorDetails = "A API retornou uma resposta sem conte√∫do.";
      } else if (err.response?.data?.error?.message) { 
          errorMessage = `Erro da API da IA: ${err.response.data.error.message}`;
          errorDetails = JSON.stringify(err.response.data.error);
          console.error(`[Req ID: ${requestId}] Detalhe Erro API Groq:`, errorDetails);
      } else { 
          console.error(`[Req ID: ${requestId}] Detalhe Erro Gen√©rico:`, err);
      }
      
      return res.status(500).json({
        error: errorMessage,
        details_dev: errorDetails, 
      });
    }
  });
  
  app.listen(port, () => console.log(`Servidor rodando em http://localhost:${port}`));